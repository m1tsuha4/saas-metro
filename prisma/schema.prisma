
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String           @id @default(cuid())
  email     String           @unique
  password  String?
  name      String?
  telephone String?
  picture   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  role      UserRole         @default(USER)
  accounts  Account[]
  tokens    TokenBlacklist[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String?  
  access_token      String?  
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model TokenBlacklist {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
}

model WhatsAppSession {
  id         String   @id @default(cuid())
  label      String?
  ownerId    String?                    
  statePath  String                     // folder path for auth files
  meJid      String?                    // e.g., 628xxx@s.whatsapp.net
  connected  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model WhatsAppContact {
  id        String   @id @default(cuid())
  phone     String   @unique
  name      String?
  waJid     String?                      // 62xxx@s.whatsapp.net
  status    String    @default("UNKNOWN") // ACTIVE, INACTIVE, UNKNOWN
  source    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model WaCampaign {
  id          String   @id @default(cuid())
  sessionId   String
  type        String   // TEXT | IMAGE
  text        String?
  imageUrl    String?
  delayMs     Int      @default(1000) // jarak kirim
  jitterMs    Int      @default(500)  // +/- random
  createdAt   DateTime @default(now())
  messages    WhatsAppMessage[]
}

model WhatsAppMessage {
  id            String   @id @default(cuid())
  contactId     String?
  phone         String
  sessionId     String
  campaignId    String?
  direction     String   // OUTGOING
  text          String?
  mediaUrl      String?
  status        String   // SENT | FAILED
  errorMessage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  campaign WaCampaign? @relation(fields:[campaignId], references:[id])
}

model GmailAccount {
  id           String   @id @default(cuid())
  ownerId      String   // your app user id
  email        String   @unique
  accessToken  String
  refreshToken String
  tokenType    String
  expiryDate   BigInt   // ms since epoch
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model EmailContact {
  id        String   @id @default(cuid())
  ownerId   String
  email     String
  name      String?
  status    String   @default("ACTIVE") // ACTIVE | BOUNCED | UNSUBSCRIBED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, email])
}

model EmailCampaign {
  id          String   @id @default(cuid())
  ownerId     String
  fromEmail   String
  subject     String
  html        String
  delayMs     Int      @default(1000)
  jitterMs    Int      @default(400)
  createdAt   DateTime @default(now())
  messages    EmailMessage[]
}

model EmailMessage {
  id          String   @id @default(cuid())
  campaignId  String
  contactId   String?
  toEmail     String
  subject     String
  status      String   // PENDING | SENT | FAILED | SKIPPED
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  campaign EmailCampaign @relation(fields: [campaignId], references: [id])
}
